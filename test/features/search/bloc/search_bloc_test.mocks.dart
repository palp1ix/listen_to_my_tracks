// Mocks generated by Mockito 5.4.6 from annotations
// in listen_to_my_tracks/test/features/search/bloc/search_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:listen_to_my_tracks/core/error/exception.dart' as _i6;
import 'package:listen_to_my_tracks/core/utils/result.dart' as _i4;
import 'package:listen_to_my_tracks/domain/entities/track.dart' as _i5;
import 'package:listen_to_my_tracks/domain/repositories/music_repository.dart'
    as _i2;
import 'package:listen_to_my_tracks/domain/repositories/search_history_repository.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [MusicRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMusicRepository extends _i1.Mock implements _i2.MusicRepository {
  MockMusicRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<List<_i5.TrackEntity>, _i6.AppException>> searchTracks({
    required String? query,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#searchTracks, [], {#query: query}),
            returnValue:
                _i3.Future<
                  _i4.Result<List<_i5.TrackEntity>, _i6.AppException>
                >.value(
                  _i7.dummyValue<
                    _i4.Result<List<_i5.TrackEntity>, _i6.AppException>
                  >(
                    this,
                    Invocation.method(#searchTracks, [], {#query: query}),
                  ),
                ),
          )
          as _i3.Future<_i4.Result<List<_i5.TrackEntity>, _i6.AppException>>);

  @override
  _i3.Future<_i4.Result<List<_i5.TrackEntity>, _i6.AppException>> getChart() =>
      (super.noSuchMethod(
            Invocation.method(#getChart, []),
            returnValue:
                _i3.Future<
                  _i4.Result<List<_i5.TrackEntity>, _i6.AppException>
                >.value(
                  _i7.dummyValue<
                    _i4.Result<List<_i5.TrackEntity>, _i6.AppException>
                  >(this, Invocation.method(#getChart, [])),
                ),
          )
          as _i3.Future<_i4.Result<List<_i5.TrackEntity>, _i6.AppException>>);

  @override
  _i3.Future<_i4.Result<List<_i5.TrackEntity>, _i6.AppException>>
  getArtistTracks(int? artistId) =>
      (super.noSuchMethod(
            Invocation.method(#getArtistTracks, [artistId]),
            returnValue:
                _i3.Future<
                  _i4.Result<List<_i5.TrackEntity>, _i6.AppException>
                >.value(
                  _i7.dummyValue<
                    _i4.Result<List<_i5.TrackEntity>, _i6.AppException>
                  >(this, Invocation.method(#getArtistTracks, [artistId])),
                ),
          )
          as _i3.Future<_i4.Result<List<_i5.TrackEntity>, _i6.AppException>>);
}

/// A class which mocks [SearchHistoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchHistoryRepository extends _i1.Mock
    implements _i8.SearchHistoryRepository {
  MockSearchHistoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Result<void, _i6.AppException>> saveSearchTerm({
    required String? term,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#saveSearchTerm, [], {#term: term}),
            returnValue: _i3.Future<_i4.Result<void, _i6.AppException>>.value(
              _i7.dummyValue<_i4.Result<void, _i6.AppException>>(
                this,
                Invocation.method(#saveSearchTerm, [], {#term: term}),
              ),
            ),
          )
          as _i3.Future<_i4.Result<void, _i6.AppException>>);

  @override
  _i3.Future<_i4.Result<List<String>, _i6.AppException>> getSearchHistory() =>
      (super.noSuchMethod(
            Invocation.method(#getSearchHistory, []),
            returnValue:
                _i3.Future<_i4.Result<List<String>, _i6.AppException>>.value(
                  _i7.dummyValue<_i4.Result<List<String>, _i6.AppException>>(
                    this,
                    Invocation.method(#getSearchHistory, []),
                  ),
                ),
          )
          as _i3.Future<_i4.Result<List<String>, _i6.AppException>>);
}
