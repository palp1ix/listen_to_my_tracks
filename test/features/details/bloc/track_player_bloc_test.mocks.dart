// Mocks generated by Mockito 5.4.6 from annotations
// in listen_to_my_tracks/test/features/details/bloc/track_player_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:listen_to_my_tracks/domain/services/audio_player_service.dart'
    as _i2;
import 'package:listen_to_my_tracks/features/details/bloc/track_player_bloc.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AudioPlayerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockAudioPlayerService extends _i1.Mock
    implements _i2.AudioPlayerService {
  MockAudioPlayerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.PlayerStatus> get statusStream =>
      (super.noSuchMethod(
            Invocation.getter(#statusStream),
            returnValue: _i3.Stream<_i4.PlayerStatus>.empty(),
          )
          as _i3.Stream<_i4.PlayerStatus>);

  @override
  _i3.Stream<Duration> get positionStream =>
      (super.noSuchMethod(
            Invocation.getter(#positionStream),
            returnValue: _i3.Stream<Duration>.empty(),
          )
          as _i3.Stream<Duration>);

  @override
  _i3.Stream<Duration?> get durationStream =>
      (super.noSuchMethod(
            Invocation.getter(#durationStream),
            returnValue: _i3.Stream<Duration?>.empty(),
          )
          as _i3.Stream<Duration?>);

  @override
  _i3.Future<void> load(String? url) =>
      (super.noSuchMethod(
            Invocation.method(#load, [url]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> play() =>
      (super.noSuchMethod(
            Invocation.method(#play, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> pause() =>
      (super.noSuchMethod(
            Invocation.method(#pause, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> seek(Duration? position) =>
      (super.noSuchMethod(
            Invocation.method(#seek, [position]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
